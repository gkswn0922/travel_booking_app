{"version":3,"file":"divide-BGb7wyGW.js","names":[],"sources":["../src/divide.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\n/**\n * Divides two numbers.\n *\n * @param value - The number.\n * @param divisor - The number to divide the value by.\n * @signature\n *    R.divide(value, divisor);\n * @example\n *    R.divide(12, 3) // => 4\n *    R.reduce([1, 2, 3, 4], R.divide, 24) // => 1\n * @dataFirst\n * @category Number\n */\nexport function divide(value: bigint, divisor: bigint): bigint;\nexport function divide(value: number, divisor: number): number;\n\n/**\n * Divides two numbers.\n *\n * @param divisor - The number to divide the value by.\n * @signature\n *    R.divide(divisor)(value);\n * @example\n *    R.divide(3)(12) // => 4\n *    R.map([2, 4, 6, 8], R.divide(2)) // => [1, 2, 3, 4]\n * @dataLast\n * @category Number\n */\nexport function divide(divisor: bigint): (value: bigint) => bigint;\nexport function divide(divisor: number): (value: number) => number;\n\nexport function divide(...args: ReadonlyArray<unknown>): unknown {\n  return purry(divideImplementation, args);\n}\n\n// The implementation only uses `number` types, but that's just because it's\n// hard to tell typescript that both value and divisor would be of the same\n// type.\nconst divideImplementation = (value: number, divisor: number): number =>\n  value / divisor;\n"],"mappings":"4CAiCA,SAAgB,EAAO,GAAG,EAAuC,CAC/D,OAAO,EAAM,EAAsB,EAAK,CAM1C,MAAM,GAAwB,EAAe,IAC3C,EAAQ"}