{"version":3,"file":"allPass-7JBKS7eL.js","names":[],"sources":["../src/allPass.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\n/**\n * Determines whether all predicates returns true for the input data.\n *\n * @param data - The input data for predicates.\n * @param fns - The list of predicates.\n * @signature\n *    R.allPass(data, fns)\n * @example\n *    const isDivisibleBy3 = (x: number) => x % 3 === 0\n *    const isDivisibleBy4 = (x: number) => x % 4 === 0\n *    const fns = [isDivisibleBy3, isDivisibleBy4]\n *    R.allPass(12, fns) // => true\n *    R.allPass(8, fns) // => false\n * @dataFirst\n * @category Array\n */\nexport function allPass<T>(\n  data: T,\n  fns: ReadonlyArray<(data: T) => boolean>,\n): boolean;\n\n/**\n * Determines whether all predicates returns true for the input data.\n *\n * @param fns - The list of predicates.\n * @signature\n *    R.allPass(fns)(data)\n * @example\n *    const isDivisibleBy3 = (x: number) => x % 3 === 0\n *    const isDivisibleBy4 = (x: number) => x % 4 === 0\n *    const fns = [isDivisibleBy3, isDivisibleBy4]\n *    R.allPass(fns)(12) // => true\n *    R.allPass(fns)(8) // => false\n * @dataLast\n * @category Array\n */\nexport function allPass<T>(\n  fns: ReadonlyArray<(data: T) => boolean>,\n): (data: T) => boolean;\n\nexport function allPass(...args: ReadonlyArray<unknown>): unknown {\n  return purry(allPassImplementation, args);\n}\n\nconst allPassImplementation = <T>(\n  data: T,\n  fns: ReadonlyArray<(data: T) => boolean>,\n): boolean => fns.every((fn) => fn(data));\n"],"mappings":"4CA0CA,SAAgB,EAAQ,GAAG,EAAuC,CAChE,OAAO,EAAM,EAAuB,EAAK,CAG3C,MAAM,GACJ,EACA,IACY,EAAI,MAAO,GAAO,EAAG,EAAK,CAAC"}