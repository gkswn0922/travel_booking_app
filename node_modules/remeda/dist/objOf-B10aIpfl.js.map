{"version":3,"file":"objOf-B10aIpfl.js","names":[],"sources":["../src/objOf.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\n/**\n * Creates an object containing a single `key:value` pair.\n *\n * @param value - The object value.\n * @param key - The property name.\n * @signature\n *    R.objOf(value, key)\n * @example\n *    R.objOf(10, 'a') // => { a: 10 }\n * @category Object\n */\nexport function objOf<T, K extends string>(value: T, key: K): Record<K, T>;\n\n/**\n * Creates an object containing a single `key:value` pair.\n *\n * @param key - The property name.\n * @signature\n *    R.objOf(key)(value)\n * @example\n *    R.pipe(10, R.objOf('a')) // => { a: 10 }\n * @category Object\n */\nexport function objOf<T, K extends string>(key: K): (value: T) => Record<K, T>;\n\nexport function objOf(...args: ReadonlyArray<unknown>): unknown {\n  return purry(objOfImplementation, args);\n}\n\nconst objOfImplementation = <T, K extends string>(\n  value: T,\n  key: K,\n): Record<K, T> =>\n  // @ts-expect-error [ts2322] - I'm not sure how to get the type right here...\n  ({ [key]: value });\n"],"mappings":"4CA2BA,SAAgB,EAAM,GAAG,EAAuC,CAC9D,OAAO,EAAM,EAAqB,EAAK,CAGzC,MAAM,GACJ,EACA,KAGC,EAAG,GAAM,EAAO"}