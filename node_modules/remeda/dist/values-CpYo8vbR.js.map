{"version":3,"file":"values-CpYo8vbR.js","names":[],"sources":["../src/values.ts"],"sourcesContent":["import type { EnumerableStringKeyedValueOf } from \"./internal/types/EnumerableStringKeyedValueOf\";\nimport type { IterableContainer } from \"./internal/types/IterableContainer\";\nimport { purry } from \"./purry\";\n\ntype Values<T extends object> = T extends IterableContainer\n  ? Array<T[number]>\n  : Array<EnumerableStringKeyedValueOf<T>>;\n\n/**\n * Returns a new array containing the values of the array or object.\n *\n * @param data - Either an array or an object.\n * @signature\n *    R.values(source)\n * @example\n *    R.values(['x', 'y', 'z']) // => ['x', 'y', 'z']\n *    R.values({ a: 'x', b: 'y', c: 'z' }) // => ['x', 'y', 'z']\n * @dataFirst\n * @category Object\n */\nexport function values<T extends object>(data: T): Values<T>;\n\n/**\n * Returns a new array containing the values of the array or object.\n *\n * @signature\n *    R.values()(source)\n * @example\n *    R.pipe(['x', 'y', 'z'], R.values()) // => ['x', 'y', 'z']\n *    R.pipe({ a: 'x', b: 'y', c: 'z' }, R.values()) // => ['x', 'y', 'z']\n *    R.pipe(\n *      { a: 'x', b: 'y', c: 'z' },\n *      R.values(),\n *      R.first(),\n *    ) // => 'x'\n * @dataLast\n * @category Object\n */\nexport function values(): <T extends object>(data: T) => Values<T>;\n\nexport function values(...args: ReadonlyArray<unknown>): unknown {\n  return purry(Object.values, args);\n}\n"],"mappings":"4CAwCA,SAAgB,EAAO,GAAG,EAAuC,CAC/D,OAAO,EAAM,OAAO,OAAQ,EAAK"}