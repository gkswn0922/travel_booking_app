{"version":3,"file":"add-CBoOU4tz.js","names":[],"sources":["../src/add.ts"],"sourcesContent":["import { purry } from \"./purry\";\n\n/**\n * Adds two numbers.\n *\n * @param value - The number.\n * @param addend - The number to add to the value.\n * @signature\n *    R.add(value, addend);\n * @example\n *    R.add(10, 5) // => 15\n *    R.add(10, -5) // => 5\n * @dataFirst\n * @category Number\n */\nexport function add(value: bigint, addend: bigint): bigint;\nexport function add(value: number, addend: number): number;\n\n/**\n * Adds two numbers.\n *\n * @param addend - The number to add to the value.\n * @signature\n *    R.add(addend)(value);\n * @example\n *    R.add(5)(10) // => 15\n *    R.add(-5)(10) // => 5\n *    R.map([1, 2, 3, 4], R.add(1)) // => [2, 3, 4, 5]\n * @dataLast\n * @category Number\n */\nexport function add(addend: bigint): (value: bigint) => bigint;\nexport function add(addend: number): (value: number) => number;\n\nexport function add(...args: ReadonlyArray<unknown>): unknown {\n  return purry(addImplementation, args);\n}\n\n// The implementation only uses `number` types, but that's just because it's\n// hard to tell typescript that both value and addend would be of the same type.\nconst addImplementation = (value: number, addend: number): number =>\n  value + addend;\n"],"mappings":"4CAkCA,SAAgB,EAAI,GAAG,EAAuC,CAC5D,OAAO,EAAM,EAAmB,EAAK,CAKvC,MAAM,GAAqB,EAAe,IACxC,EAAQ"}